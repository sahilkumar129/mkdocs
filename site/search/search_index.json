{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"about_me/","text":"Resume \u00b6","title":"About me"},{"location":"about_me/#resume","text":"","title":"Resume"},{"location":"docker/","text":"Docker \u00b6 Use Reference Docker 101 Docker 101 Docker 201 Docker 201 Docker 301 Docker 301 Docker for Beginners Docker for Beginners Docker for Intermediate Docker for Intermediate Docker for Advanced Docker for Advanced Docker Cheat Sheet Docker Cheat Sheet Docker Interview Questions Docker Interview Questions","title":"Docker"},{"location":"docker/#docker","text":"Use Reference Docker 101 Docker 101 Docker 201 Docker 201 Docker 301 Docker 301 Docker for Beginners Docker for Beginners Docker for Intermediate Docker for Intermediate Docker for Advanced Docker for Advanced Docker Cheat Sheet Docker Cheat Sheet Docker Interview Questions Docker Interview Questions","title":"Docker"},{"location":"git_commands/","text":"Git Commands \u00b6 Git Command list \u00b6 For full documentation visit git-scm.com . Take pull from a particular branch in remote \u00b6 1 git pull origin <branch_name> It is combination of git fetch + git merge Note: Always prefer rebase over pull. Rebase your current local branch \u00b6 1 git rebase <remote_base_branch> [ <local_branch> ] Ex: git rebase origin/rel-2.0.12.001-sahil (If local branch is not given, it rebases it in current local branch) Add your changes in staging interactively \u00b6 1 git add -p <files> Push changes to remote \u00b6 1 git push <remote> < local branch>:<remote_branch> Ex: git push origin rel-2.0.12.001-sahil:rel-2.0.12.001-sahil Push current branch changes to remote(also creates new remote branch if not present) \u00b6 1 git push --set-upstream origin <remote_branch_name> Not track any file in git status \u00b6 1 git update-index --assume-unchanged <file/folder/pattern> Get list of all remote branches \u00b6 1 git ls-remote --heads Create a new branch and checkout it from a remote branch with tracking \u00b6 1 git checkout -b <branch> --track <remote>/<branch> Create a new branch and checkout it from your current commit \u00b6 1 git checkout <new_branch_name> Delete a local branch \u00b6 1 git branch -d/D <branch_name> <multiple_branch_names> D = delete even if not merged d = delete only if merged Delete a remote branch \u00b6 1 git push <remote> --delete <branch_name> Ex: git push origin --delete rel-3.0 Remove files from staging are \u00b6 1 git reset HEAD file Remove unstaged changes \u00b6 1 git checkout -- file Remove all staged and unstaged changes \u00b6 1 git reset --hard Remove n last commits from local branch \u00b6 1 git reset --hard HEAD~<n> Remove files from the tree \u00b6 Recover lost commit \u00b6 Get the hash id of the commit you want to recover 1 git reflog Reset the head to that commit 1 git reset --hard <hash> Cherry pick a commit \u00b6 1 git cherry-pick <commit-hash> Logging with git \u00b6 Logs in short: 1 git log --oneline Full logs: 1 git log Logs with graph: 1 git log --graph / git log --all --graph --decorate Open mergetool \u00b6 1 git mergetool Then, after solving the conflicts continue by: 1 git merge --continue Or abort using 1 git merge --abort Check the code changes done in a file line by line \u00b6 1 git blame <file_name> Then using the sha1 id we can see the information for that commit using: 1 git show <sha1 id>","title":"Git Commands"},{"location":"git_commands/#git-commands","text":"","title":"Git Commands"},{"location":"git_commands/#git-command-list","text":"For full documentation visit git-scm.com .","title":"Git Command list"},{"location":"git_commands/#take-pull-from-a-particular-branch-in-remote","text":"1 git pull origin <branch_name> It is combination of git fetch + git merge Note: Always prefer rebase over pull.","title":"Take pull from a particular branch in remote"},{"location":"git_commands/#rebase-your-current-local-branch","text":"1 git rebase <remote_base_branch> [ <local_branch> ] Ex: git rebase origin/rel-2.0.12.001-sahil (If local branch is not given, it rebases it in current local branch)","title":"Rebase your current local branch"},{"location":"git_commands/#add-your-changes-in-staging-interactively","text":"1 git add -p <files>","title":"Add your changes in staging interactively"},{"location":"git_commands/#push-changes-to-remote","text":"1 git push <remote> < local branch>:<remote_branch> Ex: git push origin rel-2.0.12.001-sahil:rel-2.0.12.001-sahil","title":"Push changes to remote"},{"location":"git_commands/#push-current-branch-changes-to-remotealso-creates-new-remote-branch-if-not-present","text":"1 git push --set-upstream origin <remote_branch_name>","title":"Push current branch changes to remote(also creates new remote branch if not present)"},{"location":"git_commands/#not-track-any-file-in-git-status","text":"1 git update-index --assume-unchanged <file/folder/pattern>","title":"Not track any file in git status"},{"location":"git_commands/#get-list-of-all-remote-branches","text":"1 git ls-remote --heads","title":"Get list of all remote branches"},{"location":"git_commands/#create-a-new-branch-and-checkout-it-from-a-remote-branch-with-tracking","text":"1 git checkout -b <branch> --track <remote>/<branch>","title":"Create a new branch and checkout it from a remote branch with tracking"},{"location":"git_commands/#create-a-new-branch-and-checkout-it-from-your-current-commit","text":"1 git checkout <new_branch_name>","title":"Create a new branch and checkout it from your current commit"},{"location":"git_commands/#delete-a-local-branch","text":"1 git branch -d/D <branch_name> <multiple_branch_names> D = delete even if not merged d = delete only if merged","title":"Delete a local branch"},{"location":"git_commands/#delete-a-remote-branch","text":"1 git push <remote> --delete <branch_name> Ex: git push origin --delete rel-3.0","title":"Delete a remote branch"},{"location":"git_commands/#remove-files-from-staging-are","text":"1 git reset HEAD file","title":"Remove files from staging are"},{"location":"git_commands/#remove-unstaged-changes","text":"1 git checkout -- file","title":"Remove unstaged changes"},{"location":"git_commands/#remove-all-staged-and-unstaged-changes","text":"1 git reset --hard","title":"Remove all staged and unstaged changes"},{"location":"git_commands/#remove-n-last-commits-from-local-branch","text":"1 git reset --hard HEAD~<n>","title":"Remove n last commits from local branch"},{"location":"git_commands/#remove-files-from-the-tree","text":"","title":"Remove files from the tree"},{"location":"git_commands/#recover-lost-commit","text":"Get the hash id of the commit you want to recover 1 git reflog Reset the head to that commit 1 git reset --hard <hash>","title":"Recover lost commit"},{"location":"git_commands/#cherry-pick-a-commit","text":"1 git cherry-pick <commit-hash>","title":"Cherry pick a commit"},{"location":"git_commands/#logging-with-git","text":"Logs in short: 1 git log --oneline Full logs: 1 git log Logs with graph: 1 git log --graph / git log --all --graph --decorate","title":"Logging with git"},{"location":"git_commands/#open-mergetool","text":"1 git mergetool Then, after solving the conflicts continue by: 1 git merge --continue Or abort using 1 git merge --abort","title":"Open mergetool"},{"location":"git_commands/#check-the-code-changes-done-in-a-file-line-by-line","text":"1 git blame <file_name> Then using the sha1 id we can see the information for that commit using: 1 git show <sha1 id>","title":"Check the code changes done in a file line by line"},{"location":"mkdown_docs/","text":"Markdown Docs \u00b6 Use Reference Cheat Sheet Cheat Sheet Basic Syntax Basic Syntax Extended Syntax Extended Syntax","title":"Markdown Docs"},{"location":"mkdown_docs/#markdown-docs","text":"Use Reference Cheat Sheet Cheat Sheet Basic Syntax Basic Syntax Extended Syntax Extended Syntax","title":"Markdown Docs"},{"location":"nodejs/","text":"Node.JS Best Practices \u00b6 Use Reference Project Structure Project Structure Error Handling Error Handling Code Style Code Style Testing and Quality Testing and Quality Going to Production Going to Production Security Security Performance Performance Docker Docker","title":"Node.js best practices"},{"location":"nodejs/#nodejs-best-practices","text":"Use Reference Project Structure Project Structure Error Handling Error Handling Code Style Code Style Testing and Quality Testing and Quality Going to Production Going to Production Security Security Performance Performance Docker Docker","title":"Node.JS Best Practices"},{"location":"regex/","text":"Regex \u00b6 Use Reference Regex Cheat Sheet Regex Cheat Sheet","title":"Regex"},{"location":"regex/#regex","text":"Use Reference Regex Cheat Sheet Regex Cheat Sheet","title":"Regex"},{"location":"repos/","text":"Github Repos \u00b6 Repos with description \u00b6 Team Repository Repository Description DBMSS team ui React UI microservice DBMSS team store Store microservice DBMSS team playground Playground for trying POCs DBMSS team products Products microservice DBMSS team location Location microservice using google maps APIs DBMSS team users Users microservice DBMSS team commons Commons repository used as submodule in other repositories DBMSS team cart Cart microservice DBMSS team wallet Wallet microservice DBMSS team payment Payment microservice DBMSS team orders Orders microservice DBMSS team support Support microservice - ajira A solution to a virtual hacking hackathon - hana-hdbext-promisfied-example Forked repository - react-counter Created a counter app using REACT - exercise-tracker Created an exercise tracker app using MERN stack - react-tic-tac-toe tic tac toe game created using REACT - Caremonger Application to help community by leveraging ML/Bots and scalable application - Vynchronize Forked repository - twitter-sample-app Used twitter API to get list of friends who don't follow us back - LogisticStudy MVC SAP application using SAP HANA and SAP UI5","title":"Github Repos"},{"location":"repos/#github-repos","text":"","title":"Github Repos"},{"location":"repos/#repos-with-description","text":"Team Repository Repository Description DBMSS team ui React UI microservice DBMSS team store Store microservice DBMSS team playground Playground for trying POCs DBMSS team products Products microservice DBMSS team location Location microservice using google maps APIs DBMSS team users Users microservice DBMSS team commons Commons repository used as submodule in other repositories DBMSS team cart Cart microservice DBMSS team wallet Wallet microservice DBMSS team payment Payment microservice DBMSS team orders Orders microservice DBMSS team support Support microservice - ajira A solution to a virtual hacking hackathon - hana-hdbext-promisfied-example Forked repository - react-counter Created a counter app using REACT - exercise-tracker Created an exercise tracker app using MERN stack - react-tic-tac-toe tic tac toe game created using REACT - Caremonger Application to help community by leveraging ML/Bots and scalable application - Vynchronize Forked repository - twitter-sample-app Used twitter API to get list of friends who don't follow us back - LogisticStudy MVC SAP application using SAP HANA and SAP UI5","title":"Repos with description"},{"location":"system_design/","text":"System Design \u00b6 Use Reference Groking the system design Groking the system design","title":"System Design"},{"location":"system_design/#system-design","text":"Use Reference Groking the system design Groking the system design","title":"System Design"},{"location":"unit_testing/","text":"Unit Testing \u00b6 Use Reference Endpoint testing with Jest Endpoint testing with Jest","title":"Unit Testing"},{"location":"unit_testing/#unit-testing","text":"Use Reference Endpoint testing with Jest Endpoint testing with Jest","title":"Unit Testing"}]}